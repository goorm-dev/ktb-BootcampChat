# 백엔드 ASG용 커스텀 AMI 생성 파이프라인
# 백엔드 코드를 직접 배포하여 systemd로 실행하는 AMI 생성 및 ASG 업데이트
name: Backend AMI Build

on:
  push:
    branches: [ jacky ]
    paths:
      - 'backend/**'
      - 'scripts/**'
      - '.github/workflows/backend-ami-build.yml'
  pull_request:
    branches: [ jacky ]
    paths:
      - 'backend/**'

# 환경 변수 설정
env:
  AWS_REGION: ap-northeast-2
  BASE_AMI_ID: ami-0f5e205427609c732  # Amazon Linux 2023 최신 AMI ID
  INSTANCE_TYPE: t3.small
  S3_BUCKET: 8-ktb-chat-common
  # ASG 관련 설정
  LAUNCH_TEMPLATE_NAME: ktb-chat-backend-template
  ASG_NAME: ktb-chat-backend-asg
  TARGET_GROUP_ARN: ${{ secrets.TARGET_GROUP_ARN }}  # ALB 타겟 그룹 ARN

jobs:
  # 백엔드 코드 품질 검사
  test:
    runs-on: ubuntu-latest
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4

    - name: Node.js 18 설정
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: 'backend/package-lock.json'

    - name: 백엔드 의존성 설치
      working-directory: ./backend
      run: npm ci

    - name: 백엔드 린팅 (선택사항)
      working-directory: ./backend
      run: |
        if npm list eslint >/dev/null 2>&1; then
          npm run lint
        else
          echo "ESLint 설정이 없습니다. 스킵합니다."
        fi
      continue-on-error: true

    - name: 백엔드 테스트 실행
      working-directory: ./backend
      run: |
        if npm run | grep -q "test"; then
          npm test
        else
          echo "테스트 스크립트가 없습니다. 스킵합니다."
        fi
      continue-on-error: true

  # AMI 생성 및 백엔드 배포
  build-ami:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: AWS 자격증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 빌드 메타데이터 생성
      id: meta
      run: |
        # Git 커밋 해시의 짧은 버전 생성
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        
        # 타임스탬프 생성
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # AMI 이름 생성
        AMI_NAME="ktb-chat-backend-jacky-${TIMESTAMP}-${SHORT_SHA}"
        
        echo "ami_name=${AMI_NAME}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT
        echo "deployment_package=backend-${TIMESTAMP}-${SHORT_SHA}.tar.gz" >> $GITHUB_OUTPUT

    - name: 백엔드 배포 패키지 생성
      run: |
        echo "📦 백엔드 배포 패키지 생성 중..."
        
        # 백엔드 코드만 압축 (node_modules 제외)
        tar -czf ${{ steps.meta.outputs.deployment_package }} \
          --exclude=node_modules \
          --exclude=.git \
          --exclude='*.log' \
          --exclude='.env*' \
          --exclude='coverage' \
          --exclude='test' \
          backend/
        
        # 압축 파일 크기 확인
        echo "압축 파일 크기:"
        ls -lh ${{ steps.meta.outputs.deployment_package }}

    - name: S3에 배포 패키지 업로드
      run: |
        echo "☁️ S3에 백엔드 배포 패키지 업로드..."
        
        # S3 버킷 존재 확인
        if ! aws s3 ls s3://${{ env.S3_BUCKET }} >/dev/null 2>&1; then
          echo "❌ S3 버킷이 존재하지 않습니다: ${{ env.S3_BUCKET }}"
          exit 1
        fi
        
        # S3에 업로드
        aws s3 cp ${{ steps.meta.outputs.deployment_package }} \
          s3://${{ env.S3_BUCKET }}/backend/deployments/${{ steps.meta.outputs.deployment_package }} \
          --metadata "commit-sha=${{ github.sha }},build-timestamp=${{ steps.meta.outputs.timestamp }},branch=jacky"
        
        echo "✅ S3 업로드 완료"

    - name: AMI 설정 스크립트 생성
      run: |
        echo "📝 AMI 설정을 위한 User Data 스크립트 생성..."
        
        cat > ami-setup.sh << 'EOF'
        #!/bin/bash
        
        # 로그 설정
        exec > >(tee /var/log/ami-setup.log) 2>&1
        echo "=== AMI 설정 시작: $(date) ==="
        
        # 시스템 업데이트
        echo "시스템 업데이트 중..."
        yum update -y
        
        # Node.js 18 설치
        echo "Node.js 18 설치 중..."
        curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
        yum install -y nodejs
        
        # PM2 전역 설치
        echo "PM2 설치 중..."
        npm install -g pm2
        
        # 애플리케이션 사용자 생성
        echo "애플리케이션 사용자 생성..."
        useradd -m -s /bin/bash appuser
        
        # 애플리케이션 디렉토리 생성
        echo "애플리케이션 디렉토리 설정..."
        mkdir -p /opt/ktb-chat-backend
        chown appuser:appuser /opt/ktb-chat-backend
        
        # AWS CLI 설치 (최신 버전)
        echo "AWS CLI 설치 중..."
        curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip awscliv2.zip
        ./aws/install
        rm -rf aws awscliv2.zip
        
        # S3에서 애플리케이션 코드 다운로드 및 설치
        echo "S3에서 백엔드 코드 다운로드..."
        cd /opt/ktb-chat-backend
        aws s3 cp s3://${{ env.S3_BUCKET }}/backend/deployments/${{ steps.meta.outputs.deployment_package }} .
        tar -xzf ${{ steps.meta.outputs.deployment_package }}
        
        # 백엔드 디렉토리로 이동 및 의존성 설치
        cd backend
        echo "백엔드 의존성 설치 중..."
        npm ci --production
        
        # 소유권 변경
        chown -R appuser:appuser /opt/ktb-chat-backend
        
        # PM2 ecosystem 파일 생성
        cat > ecosystem.config.js << 'EOFPM2'
        module.exports = {
          apps: [{
            name: 'ktb-chat-backend',
            script: 'server.js',
            cwd: '/opt/ktb-chat-backend/backend',
            user: 'appuser',
            instances: 1,
            exec_mode: 'cluster',
            watch: false,
            max_memory_restart: '1G',
            env: {
              NODE_ENV: 'production',
              PORT: 5000
            },
            log_file: '/var/log/ktb-chat-backend.log',
            out_file: '/var/log/ktb-chat-backend-out.log',
            error_file: '/var/log/ktb-chat-backend-error.log',
            merge_logs: true,
            time: true
          }]
        };
        EOFPM2
        
        # systemd 서비스 파일 생성
        cat > /etc/systemd/system/ktb-chat-backend.service << 'EOFSYSTEMD'
        [Unit]
        Description=KTB Chat Backend Application
        After=network.target
        
        [Service]
        Type=forking
        User=appuser
        WorkingDirectory=/opt/ktb-chat-backend
        ExecStart=/usr/bin/pm2 start ecosystem.config.js --no-daemon
        ExecReload=/usr/bin/pm2 reload ecosystem.config.js
        ExecStop=/usr/bin/pm2 kill
        Restart=always
        RestartSec=10
        StandardOutput=syslog
        StandardError=syslog
        SyslogIdentifier=ktb-chat-backend
        
        [Install]
        WantedBy=multi-user.target
        EOFSYSTEMD
        
        # systemd 서비스 활성화 (부팅 시 자동 시작)
        systemctl daemon-reload
        systemctl enable ktb-chat-backend.service
        
        # 로그 로테이션 설정
        cat > /etc/logrotate.d/ktb-chat-backend << 'EOFLOGROTATE'
        /var/log/ktb-chat-backend*.log {
            daily
            rotate 30
            compress
            delaycompress
            missingok
            notifempty
            create 644 appuser appuser
            postrotate
                /usr/bin/pm2 reloadLogs
            endscript
        }
        EOFLOGROTATE
        
        # CloudWatch 에이전트 설치
        echo "CloudWatch 에이전트 설치..."
        yum install -y amazon-cloudwatch-agent
        
        # 헬스체크 엔드포인트 확인 스크립트 생성
        cat > /usr/local/bin/health-check.sh << 'EOFHEALTH'
        #!/bin/bash
        # 백엔드 애플리케이션 헬스체크
        curl -f http://localhost:5000/health || exit 1
        EOFHEALTH
        chmod +x /usr/local/bin/health-check.sh
        
        # 임시 파일 정리
        rm -f /opt/ktb-chat-backend/${{ steps.meta.outputs.deployment_package }}
        
        echo "=== AMI 설정 완료: $(date) ==="
        
        # 시스템 준비 완료 신호
        touch /tmp/ami-setup-complete
        EOF
        
        # 스크립트 권한 설정
        chmod +x ami-setup.sh

    - name: EC2 인스턴스 생성 및 AMI 빌드
      id: create-instance
      run: |
        echo "🖥️ AMI 빌드용 EC2 인스턴스 생성 중..."
        
        # EC2 인스턴스 실행
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ env.BASE_AMI_ID }} \
          --instance-type ${{ env.INSTANCE_TYPE }} \
          --iam-instance-profile Name=EC2-S3-Access-Role \
          --user-data file://ami-setup.sh \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=AMI-Build-${{ steps.meta.outputs.ami_name }}},{Key=Purpose,Value=AMI-Build},{Key=Application,Value=ktb-chat-backend}]' \
          --query 'Instances[0].InstanceId' \
          --output text)
        
        echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
        echo "✅ 인스턴스 생성됨: ${INSTANCE_ID}"
        
        # 인스턴스가 실행될 때까지 대기
        echo "⏳ 인스턴스 부팅 및 설정 대기 중..."
        aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}
        
        # 추가 대기 시간 (애플리케이션 설치 완료를 위해)
        echo "📦 백엔드 애플리케이션 설치 중... (약 5분 소요)"
        sleep 300
        
        echo "✅ 인스턴스 설정 완료"

    - name: AMI 생성
      id: create-ami
      run: |
        echo "📸 AMI 생성 중..."
        
        # 인스턴스 중지
        echo "인스턴스 중지 중..."
        aws ec2 stop-instances --instance-ids ${{ steps.create-instance.outputs.instance_id }}
        aws ec2 wait instance-stopped --instance-ids ${{ steps.create-instance.outputs.instance_id }}
        
        # AMI 생성
        echo "AMI 스냅샷 생성 중..."
        AMI_ID=$(aws ec2 create-image \
          --instance-id ${{ steps.create-instance.outputs.instance_id }} \
          --name "${{ steps.meta.outputs.ami_name }}" \
          --description "KTB Chat Backend AMI - jacky branch - Built on $(date)" \
          --no-reboot \
          --tag-specifications 'ResourceType=image,Tags=[{Key=Name,Value=${{ steps.meta.outputs.ami_name }}},{Key=Branch,Value=jacky},{Key=Application,Value=ktb-chat-backend},{Key=BuildTimestamp,Value=${{ steps.meta.outputs.timestamp }}}]' \
          --query 'ImageId' \
          --output text)
        
        echo "ami_id=${AMI_ID}" >> $GITHUB_OUTPUT
        echo "✅ AMI 생성됨: ${AMI_ID}"
        
        # AMI 사용 가능할 때까지 대기
        echo "⏳ AMI 생성 완료 대기 중..."
        aws ec2 wait image-available --image-ids ${AMI_ID}
        
        echo "🎉 AMI 생성 완료: ${AMI_ID}"

    # ASG Launch Template 업데이트
    - name: Launch Template 업데이트
      id: update-template
      run: |
        echo "🚀 Launch Template 업데이트 중..."
        
        # 기존 Launch Template 확인
        if aws ec2 describe-launch-templates --launch-template-names ${{ env.LAUNCH_TEMPLATE_NAME }} >/dev/null 2>&1; then
          echo "기존 Launch Template 발견: ${{ env.LAUNCH_TEMPLATE_NAME }}"
          
          # 새 버전 생성
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
            --source-version '$Latest' \
            --launch-template-data '{
              "ImageId": "${{ steps.create-ami.outputs.ami_id }}",
              "TagSpecifications": [
                {
                  "ResourceType": "instance",
                  "Tags": [
                    {"Key": "Name", "Value": "ktb-chat-backend-instance"},
                    {"Key": "Application", "Value": "ktb-chat-backend"},
                    {"Key": "Environment", "Value": "production"},
                    {"Key": "Branch", "Value": "jacky"},
                    {"Key": "AMI-Version", "Value": "${{ steps.meta.outputs.timestamp }}-${{ steps.meta.outputs.short_sha }}"}
                  ]
                }
              ]
            }' \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          echo "template_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "✅ Launch Template 새 버전 생성됨: ${NEW_VERSION}"
          
          # 기본 버전으로 설정
          aws ec2 modify-launch-template \
            --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
            --default-version ${NEW_VERSION}
          
          echo "✅ Launch Template 기본 버전 업데이트 완료"
          
        else
          echo "Launch Template이 존재하지 않습니다. 새로 생성합니다..."
          
          # 새 Launch Template 생성
          aws ec2 create-launch-template \
            --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
            --launch-template-data '{
              "ImageId": "${{ steps.create-ami.outputs.ami_id }}",
              "InstanceType": "t3.medium",
              "SecurityGroupIds": ["${{ secrets.BACKEND_SECURITY_GROUP_ID }}"],
              "IamInstanceProfile": {
                "Name": "EC2-S3-Access-Role"
              },
              "Monitoring": {
                "Enabled": true
              },
              "TagSpecifications": [
                {
                  "ResourceType": "instance",
                  "Tags": [
                    {"Key": "Name", "Value": "ktb-chat-backend-instance"},
                    {"Key": "Application", "Value": "ktb-chat-backend"},
                    {"Key": "Environment", "Value": "production"},
                    {"Key": "Branch", "Value": "jacky"},
                    {"Key": "AMI-Version", "Value": "${{ steps.meta.outputs.timestamp }}-${{ steps.meta.outputs.short_sha }}"}
                  ]
                }
              ]
            }'
          
          echo "template_version=1" >> $GITHUB_OUTPUT
          echo "✅ 새 Launch Template 생성 완료"
        fi

    # ASG 업데이트
    - name: Auto Scaling Group 업데이트
      run: |
        echo "📈 Auto Scaling Group 업데이트 중..."
        
        # ASG 존재 확인
        if aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${{ env.ASG_NAME }} >/dev/null 2>&1; then
          echo "기존 ASG 발견: ${{ env.ASG_NAME }}"
          
          # ASG Launch Template 업데이트
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.ASG_NAME }} \
            --launch-template LaunchTemplateName=${{ env.LAUNCH_TEMPLATE_NAME }},Version='$Latest'
          
          echo "✅ ASG Launch Template 업데이트 완료"
          
          # 인스턴스 새로고침 시작 (점진적 배포)
          echo "🔄 인스턴스 새로고침 시작..."
          REFRESH_ID=$(aws autoscaling start-instance-refresh \
            --auto-scaling-group-name ${{ env.ASG_NAME }} \
            --preferences '{
              "InstanceWarmup": 300,
              "MinHealthyPercentage": 50,
              "CheckpointPercentages": [50],
              "CheckpointDelay": 600
            }' \
            --query 'InstanceRefreshId' \
            --output text)
          
          echo "✅ 인스턴스 새로고침 시작됨: ${REFRESH_ID}"
          echo "📊 새로고침 진행 상황은 AWS 콘솔에서 확인할 수 있습니다."
          
        else
          echo "⚠️ ASG가 존재하지 않습니다: ${{ env.ASG_NAME }}"
          echo "ASG를 수동으로 생성한 후 다시 실행해주세요."
        fi

    - name: 인스턴스 정리
      if: always()
      run: |
        echo "🧹 빌드용 인스턴스 정리 중..."
        
        if [[ -n "${{ steps.create-instance.outputs.instance_id }}" ]]; then
          # 인스턴스 종료
          aws ec2 terminate-instances --instance-ids ${{ steps.create-instance.outputs.instance_id }}
          echo "✅ 인스턴스 종료됨: ${{ steps.create-instance.outputs.instance_id }}"
        fi
        
        # 임시 파일 정리
        rm -f ami-setup.sh
        rm -f ${{ steps.meta.outputs.deployment_package }}

    - name: AMI 정보 S3에 저장
      if: success()
      run: |
        echo "📄 AMI 정보 파일 생성 및 S3 업로드..."
        
        # AMI 정보 JSON 파일 생성
        cat > ami-info.json << EOF
        {
          "amiId": "${{ steps.create-ami.outputs.ami_id }}",
          "amiName": "${{ steps.meta.outputs.ami_name }}",
          "buildTimestamp": "${{ steps.meta.outputs.timestamp }}",
          "commitSha": "${{ github.sha }}",
          "shortSha": "${{ steps.meta.outputs.short_sha }}",
          "branch": "jacky",
          "repository": "${{ github.repository }}",
          "workflow": "${{ github.workflow }}",
          "runId": "${{ github.run_id }}",
          "deploymentPackage": "${{ steps.meta.outputs.deployment_package }}",
          "baseAmiId": "${{ env.BASE_AMI_ID }}",
          "instanceType": "${{ env.INSTANCE_TYPE }}",
          "region": "${{ env.AWS_REGION }}",
          "launchTemplate": {
            "name": "${{ env.LAUNCH_TEMPLATE_NAME }}",
            "version": "${{ steps.update-template.outputs.template_version }}"
          },
          "asgName": "${{ env.ASG_NAME }}"
        }
        EOF
        
        # S3에 AMI 정보 업로드
        aws s3 cp ami-info.json \
          s3://${{ env.S3_BUCKET }}/backend/ami-info/backend-ami-${{ steps.meta.outputs.timestamp }}-${{ steps.meta.outputs.short_sha }}.json
        
        # 최신 AMI 정보도 업로드
        aws s3 cp ami-info.json \
          s3://${{ env.S3_BUCKET }}/backend/ami-info/backend-ami-latest-jacky.json

    - name: 배포 결과 요약
      if: success()
      run: |
        echo "## 🎉 백엔드 AMI 빌드 및 배포 완료" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 AMI 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **AMI ID**: \`${{ steps.create-ami.outputs.ami_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **AMI 이름**: \`${{ steps.meta.outputs.ami_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **커밋**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치**: jacky" >> $GITHUB_STEP_SUMMARY
        echo "- **빌드 시간**: ${{ steps.meta.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 배포 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **Launch Template**: \`${{ env.LAUNCH_TEMPLATE_NAME }}\` (버전 ${{ steps.update-template.outputs.template_version }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Auto Scaling Group**: \`${{ env.ASG_NAME }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **인스턴스 새로고침**: 진행 중 (AWS 콘솔에서 확인)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 모니터링" >> $GITHUB_STEP_SUMMARY
        echo "- 애플리케이션 포트: 5000" >> $GITHUB_STEP_SUMMARY
        echo "- 헬스체크: \`/health\` 엔드포인트" >> $GITHUB_STEP_SUMMARY
        echo "- 로그 위치: \`/var/log/ktb-chat-backend*.log\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📦 S3 저장 위치" >> $GITHUB_STEP_SUMMARY
        echo "- 배포 패키지: \`s3://${{ env.S3_BUCKET }}/backend/deployments/${{ steps.meta.outputs.deployment_package }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- AMI 정보: \`s3://${{ env.S3_BUCKET }}/backend/ami-info/backend-ami-${{ steps.meta.outputs.timestamp }}-${{ steps.meta.outputs.short_sha }}.json\`" >> $GITHUB_STEP_SUMMARY
