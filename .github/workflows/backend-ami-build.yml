# 백엔드 ASG용 커스텀 AMI 생성 파이프라인 (개발 환경)
# 백엔드 코드를 GitHub에서 직접 clone하여 systemd로 실행하는 AMI 생성 및 ASG 업데이트
name: Backend AMI Build (Dev)

on:
  push:
    branches: [ jacky ]
    paths:
      - 'backend/**'
      - 'scripts/**'
      - '.github/workflows/backend-ami-build.yml'
  pull_request:
    branches: [ jacky ]
    paths:
      - 'backend/**'

# 환경 변수 설정
env:
  AWS_REGION: ap-northeast-2
  BASE_AMI_ID: ami-0f5e205427609c732  # Amazon Linux 2023 최신 AMI ID
  INSTANCE_TYPE: t3.small
  # 네트워크 설정
  VPC_ID: vpc-0cbb28aa7ecfee012
  SUBNET_ID: subnet-054215bf6c92eb539
  # GitHub 레포지토리 설정
  GITHUB_REPO: https://github.com/100-hours-a-week/8-ktb-chat.git
  GITHUB_BRANCH: jacky
  # ASG 관련 설정
  LAUNCH_TEMPLATE_NAME: ktb-chat-backend-template
  ASG_NAME: ktb-chat-backend-asg

jobs:
  # AMI 생성 및 백엔드 배포
  build-ami:
    runs-on: ubuntu-latest
    
    steps:
    - name: 코드 체크아웃
      uses: actions/checkout@v4
      
    - name: AWS 자격증명 설정
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 빌드 메타데이터 생성
      id: meta
      run: |
        # Git 커밋 해시의 짧은 버전 생성
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        
        # 타임스탬프 생성
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # AMI 이름 생성
        AMI_NAME="ktb-chat-backend-jacky-${TIMESTAMP}-${SHORT_SHA}"
        
        echo "ami_name=${AMI_NAME}" >> $GITHUB_OUTPUT
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT
        echo "timestamp=${TIMESTAMP}" >> $GITHUB_OUTPUT

    - name: AMI 설정 스크립트 생성
      run: |
        echo "📝 AMI 설정을 위한 User Data 스크립트 생성..."
        
        cat > ami-setup.sh << EOF
        #!/bin/bash
        
        # 로그 설정
        exec > >(tee /var/log/ami-setup.log) 2>&1
        echo "=== AMI 설정 시작: $(date) ==="
        
        # 시스템 업데이트
        echo "시스템 업데이트 중..."
        yum update -y
        
        # 개발 도구 설치
        echo "개발 도구 설치 중..."
        yum groupinstall -y "Development Tools"
        yum install -y git curl unzip
        
        # Node.js 18 설치
        echo "Node.js 18 설치 중..."
        curl -fsSL https://rpm.nodesource.com/setup_18.x | bash -
        yum install -y nodejs
        
        # PM2 전역 설치
        echo "PM2 설치 중..."
        npm install -g pm2
        
        # 애플리케이션 사용자 생성
        echo "애플리케이션 사용자 생성..."
        useradd -m -s /bin/bash appuser
        
        # 애플리케이션 디렉토리 생성
        echo "애플리케이션 디렉토리 설정..."
        mkdir -p /opt/ktb-chat-backend
        chown appuser:appuser /opt/ktb-chat-backend
        
        # GitHub에서 코드 클론
        echo "GitHub에서 백엔드 코드 클론 중..."
        cd /opt/ktb-chat-backend
        git clone -b ${{ env.GITHUB_BRANCH }} ${{ env.GITHUB_REPO }} .
        
        # 백엔드 디렉토리로 이동 및 의존성 설치
        cd backend
        echo "백엔드 의존성 설치 중..."
        npm ci --production
        
        # 소유권 변경
        chown -R appuser:appuser /opt/ktb-chat-backend
        
        # GitHub Secrets에서 환경 변수 파일 생성
        cat > .env << 'EOFENV'
        ${{ secrets.ENV_BACKEND_DEV }}
        EOFENV
        
        # PM2 ecosystem 파일 생성
        cat > ecosystem.config.js << 'EOFPM2'
        module.exports = {
          apps: [{
            name: 'ktb-chat-backend',
            script: 'server.js',
            cwd: '/opt/ktb-chat-backend/backend',
            user: 'appuser',
            instances: 1,
            exec_mode: 'cluster',
            watch: false,
            max_memory_restart: '1G',
            env: {
              NODE_ENV: 'production',
              PORT: 5000
            },
            log_file: '/var/log/ktb-chat-backend.log',
            out_file: '/var/log/ktb-chat-backend-out.log',
            error_file: '/var/log/ktb-chat-backend-error.log',
            merge_logs: true,
            time: true
          }]
        };
        EOFPM2
        
        # systemd 서비스 파일 생성
        cat > /etc/systemd/system/ktb-chat-backend.service << 'EOFSYSTEMD'
        [Unit]
        Description=KTB Chat Backend Application
        After=network.target
        
        [Service]
        Type=forking
        User=appuser
        WorkingDirectory=/opt/ktb-chat-backend
        ExecStart=/usr/bin/pm2 start ecosystem.config.js --no-daemon
        ExecReload=/usr/bin/pm2 reload ecosystem.config.js
        ExecStop=/usr/bin/pm2 kill
        Restart=always
        RestartSec=10
        StandardOutput=syslog
        StandardError=syslog
        SyslogIdentifier=ktb-chat-backend
        
        [Install]
        WantedBy=multi-user.target
        EOFSYSTEMD
        
        # systemd 서비스 활성화 (부팅 시 자동 시작)
        systemctl daemon-reload
        systemctl enable ktb-chat-backend.service
        
        # 로그 로테이션 설정
        cat > /etc/logrotate.d/ktb-chat-backend << 'EOFLOGROTATE'
        /var/log/ktb-chat-backend*.log {
            daily
            rotate 30
            compress
            delaycompress
            missingok
            notifempty
            create 644 appuser appuser
            postrotate
                /usr/bin/pm2 reloadLogs
            endscript
        }
        EOFLOGROTATE
        
        # CloudWatch 에이전트 설치 (선택사항)
        echo "CloudWatch 에이전트 설치..."
        yum install -y amazon-cloudwatch-agent
        
        # 헬스체크 엔드포인트 확인 스크립트 생성
        cat > /usr/local/bin/health-check.sh << 'EOFHEALTH'
        #!/bin/bash
        # 백엔드 애플리케이션 헬스체크
        curl -f http://localhost:5000/health || exit 1
        EOFHEALTH
        chmod +x /usr/local/bin/health-check.sh
        
        # 개발 환경 설정 완료 표시
        echo "=== 개발 환경 AMI 설정 완료: $(date) ==="
        echo "GitHub 레포지토리: ${{ env.GITHUB_REPO }}"
        echo "브랜치: ${{ env.GITHUB_BRANCH }}"
        echo "커밋: ${{ github.sha }}"
        
        # 시스템 준비 완료 신호
        touch /tmp/ami-setup-complete
        EOF
        
        # 스크립트 권한 설정
        chmod +x ami-setup.sh

    - name: 보안 그룹 생성 또는 확인
      id: security-group
      run: |
        echo "🔒 보안 그룹 설정 중..."
        
        # AMI 빌드용 보안 그룹 이름
        SG_NAME="ktb-chat-ami-build-sg"
        
        # 기존 보안 그룹 확인
        SG_ID=$(aws ec2 describe-security-groups \
          --filters "Name=group-name,Values=${SG_NAME}" "Name=vpc-id,Values=${{ env.VPC_ID }}" \
          --query 'SecurityGroups[0].GroupId' \
          --output text 2>/dev/null || echo "None")
        
        if [[ "$SG_ID" == "None" || "$SG_ID" == "" ]]; then
          echo "새 보안 그룹 생성 중..."
          
          # 보안 그룹 생성
          SG_ID=$(aws ec2 create-security-group \
            --group-name "${SG_NAME}" \
            --description "Security group for KTB Chat AMI build instances" \
            --vpc-id ${{ env.VPC_ID }} \
            --query 'GroupId' \
            --output text)
          
          # 인바운드 규칙 추가 (SSH 접근용 - 전체 인터넷에서 접근 가능)
          aws ec2 authorize-security-group-ingress \
            --group-id ${SG_ID} \
            --protocol tcp \
            --port 22 \
            --cidr 0.0.0.0/0
          
          # HTTP 접근 허용 (패키지 다운로드용)
          aws ec2 authorize-security-group-ingress \
            --group-id ${SG_ID} \
            --protocol tcp \
            --port 80 \
            --cidr 0.0.0.0/0
          
          # HTTPS 접근 허용 (패키지 다운로드용)
          aws ec2 authorize-security-group-ingress \
            --group-id ${SG_ID} \
            --protocol tcp \
            --port 443 \
            --cidr 0.0.0.0/0
          
          echo "✅ 새 보안 그룹 생성됨: ${SG_ID}"
        else
          echo "✅ 기존 보안 그룹 사용: ${SG_ID}"
        fi
        
        echo "security_group_id=${SG_ID}" >> $GITHUB_OUTPUT

    - name: EC2 인스턴스 생성 및 AMI 빌드
      id: create-instance
      run: |
        echo "🖥️ AMI 빌드용 EC2 인스턴스 생성 중..."
        
        # EC2 인스턴스 실행 (VPC 및 서브넷 지정)
        INSTANCE_ID=$(aws ec2 run-instances \
          --image-id ${{ env.BASE_AMI_ID }} \
          --instance-type ${{ env.INSTANCE_TYPE }} \
          --subnet-id ${{ env.SUBNET_ID }} \
          --security-group-ids ${{ steps.security-group.outputs.security_group_id }} \
          --associate-public-ip-address \
          --user-data file://ami-setup.sh \
          --tag-specifications 'ResourceType=instance,Tags=[{Key=Name,Value=AMI-Build-${{ steps.meta.outputs.ami_name }}},{Key=Purpose,Value=AMI-Build},{Key=Application,Value=ktb-chat-backend}]' \
          --query 'Instances[0].InstanceId' \
          --output text)
        
        echo "instance_id=${INSTANCE_ID}" >> $GITHUB_OUTPUT
        echo "✅ 인스턴스 생성됨: ${INSTANCE_ID}"
        
        # 인스턴스가 실행될 때까지 대기
        echo "⏳ 인스턴스 부팅 및 설정 대기 중..."
        aws ec2 wait instance-running --instance-ids ${INSTANCE_ID}
        
        # 추가 대기 시간 (애플리케이션 설치 완료를 위해)
        echo "📦 백엔드 애플리케이션 설치 중... (약 7분 소요)"
        sleep 420
        
        echo "✅ 인스턴스 설정 완료"

    - name: AMI 생성
      id: create-ami
      run: |
        echo "📸 AMI 생성 중..."
        
        # 인스턴스 중지
        echo "인스턴스 중지 중..."
        aws ec2 stop-instances --instance-ids ${{ steps.create-instance.outputs.instance_id }}
        aws ec2 wait instance-stopped --instance-ids ${{ steps.create-instance.outputs.instance_id }}
        
        # AMI 생성
        echo "AMI 스냅샷 생성 중..."
        AMI_ID=$(aws ec2 create-image \
          --instance-id ${{ steps.create-instance.outputs.instance_id }} \
          --name "${{ steps.meta.outputs.ami_name }}" \
          --description "KTB Chat Backend AMI - jacky branch (Dev) - Built on $(date)" \
          --no-reboot \
          --tag-specifications 'ResourceType=image,Tags=[{Key=Name,Value=${{ steps.meta.outputs.ami_name }}},{Key=Branch,Value=jacky},{Key=Application,Value=ktb-chat-backend},{Key=Environment,Value=development},{Key=BuildTimestamp,Value=${{ steps.meta.outputs.timestamp }}}]' \
          --query 'ImageId' \
          --output text)
        
        echo "ami_id=${AMI_ID}" >> $GITHUB_OUTPUT
        echo "✅ AMI 생성됨: ${AMI_ID}"
        
        # AMI 사용 가능할 때까지 대기
        echo "⏳ AMI 생성 완료 대기 중..."
        aws ec2 wait image-available --image-ids ${AMI_ID}
        
        echo "🎉 AMI 생성 완료: ${AMI_ID}"

    - name: Launch Template 업데이트
      id: update-template
      run: |
        echo "🚀 Launch Template 업데이트 중..."
        
        # 기존 Launch Template 확인
        if aws ec2 describe-launch-templates --launch-template-names ${{ env.LAUNCH_TEMPLATE_NAME }} >/dev/null 2>&1; then
          echo "기존 Launch Template 발견: ${{ env.LAUNCH_TEMPLATE_NAME }}"
          
          # 새 버전 생성
          NEW_VERSION=$(aws ec2 create-launch-template-version \
            --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
            --source-version '$Latest' \
            --launch-template-data '{
              "ImageId": "${{ steps.create-ami.outputs.ami_id }}",
              "TagSpecifications": [
                {
                  "ResourceType": "instance",
                  "Tags": [
                    {"Key": "Name", "Value": "ktb-chat-backend-dev-instance"},
                    {"Key": "Application", "Value": "ktb-chat-backend"},
                    {"Key": "Environment", "Value": "development"},
                    {"Key": "Branch", "Value": "jacky"},
                    {"Key": "AMI-Version", "Value": "${{ steps.meta.outputs.timestamp }}-${{ steps.meta.outputs.short_sha }}"}
                  ]
                }
              ]
            }' \
            --query 'LaunchTemplateVersion.VersionNumber' \
            --output text)
          
          echo "template_version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "✅ Launch Template 새 버전 생성됨: ${NEW_VERSION}"
          
          # 기본 버전으로 설정
          aws ec2 modify-launch-template \
            --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
            --default-version ${NEW_VERSION}
          
          echo "✅ Launch Template 기본 버전 업데이트 완료"
          
        else
          echo "Launch Template이 존재하지 않습니다. 새로 생성합니다..."
          
          # 새 Launch Template 생성 (개발 환경용 설정)
          aws ec2 create-launch-template \
            --launch-template-name ${{ env.LAUNCH_TEMPLATE_NAME }} \
            --launch-template-data '{
              "ImageId": "${{ steps.create-ami.outputs.ami_id }}",
              "InstanceType": "t3.small",
              "Monitoring": {
                "Enabled": true
              },
              "TagSpecifications": [
                {
                  "ResourceType": "instance",
                  "Tags": [
                    {"Key": "Name", "Value": "ktb-chat-backend-dev-instance"},
                    {"Key": "Application", "Value": "ktb-chat-backend"},
                    {"Key": "Environment", "Value": "development"},
                    {"Key": "Branch", "Value": "jacky"},
                    {"Key": "AMI-Version", "Value": "${{ steps.meta.outputs.timestamp }}-${{ steps.meta.outputs.short_sha }}"}
                  ]
                }
              ]
            }'
          
          echo "template_version=1" >> $GITHUB_OUTPUT
          echo "✅ 새 Launch Template 생성 완료"
        fi

    - name: Auto Scaling Group 업데이트 (선택사항)
      run: |
        echo "📈 Auto Scaling Group 업데이트 확인 중..."
        
        # ASG 존재 확인
        if aws autoscaling describe-auto-scaling-groups --auto-scaling-group-names ${{ env.ASG_NAME }} >/dev/null 2>&1; then
          echo "기존 ASG 발견: ${{ env.ASG_NAME }}"
          
          # ASG Launch Template 업데이트
          aws autoscaling update-auto-scaling-group \
            --auto-scaling-group-name ${{ env.ASG_NAME }} \
            --launch-template LaunchTemplateName=${{ env.LAUNCH_TEMPLATE_NAME }},Version='$Latest'
          
          echo "✅ ASG Launch Template 업데이트 완료"
          
          # 개발 환경에서는 즉시 인스턴스 교체하지 않음
          echo "ℹ️ 개발 환경이므로 인스턴스 새로고침을 자동으로 시작하지 않습니다."
          echo "필요시 AWS 콘솔에서 수동으로 인스턴스 새로고침을 시작하세요."
          
        else
          echo "⚠️ ASG가 존재하지 않습니다: ${{ env.ASG_NAME }}"
          echo "필요시 AWS 콘솔에서 ASG를 생성한 후 Launch Template을 사용하세요."
        fi

    - name: 인스턴스 정리
      if: always()
      run: |
        echo "🧹 빌드용 인스턴스 정리 중..."
        
        if [[ -n "${{ steps.create-instance.outputs.instance_id }}" ]]; then
          # 인스턴스 종료
          aws ec2 terminate-instances --instance-ids ${{ steps.create-instance.outputs.instance_id }}
          echo "✅ 인스턴스 종료됨: ${{ steps.create-instance.outputs.instance_id }}"
        fi
        
        # 임시 파일 정리
        rm -f ami-setup.sh

    - name: 배포 결과 요약
      if: success()
      run: |
        echo "## 🎉 백엔드 AMI 빌드 완료 (개발 환경)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📋 AMI 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **AMI ID**: \`${{ steps.create-ami.outputs.ami_id }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **AMI 이름**: \`${{ steps.meta.outputs.ami_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **커밋**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치**: jacky" >> $GITHUB_STEP_SUMMARY
        echo "- **빌드 시간**: ${{ steps.meta.outputs.timestamp }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🔧 개발 환경 설정" >> $GITHUB_STEP_SUMMARY
        echo "- **GitHub 레포**: ${{ env.GITHUB_REPO }}" >> $GITHUB_STEP_SUMMARY
        echo "- **브랜치**: ${{ env.GITHUB_BRANCH }}" >> $GITHUB_STEP_SUMMARY
        echo "- **환경**: 개발용 (기본 설정 포함)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 배포 정보" >> $GITHUB_STEP_SUMMARY
        echo "- **Launch Template**: \`${{ env.LAUNCH_TEMPLATE_NAME }}\` (버전 ${{ steps.update-template.outputs.template_version }})" >> $GITHUB_STEP_SUMMARY
        echo "- **Auto Scaling Group**: \`${{ env.ASG_NAME }}\` (자동 교체 비활성화)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 📊 모니터링" >> $GITHUB_STEP_SUMMARY
        echo "- 애플리케이션 포트: 5000" >> $GITHUB_STEP_SUMMARY
        echo "- 헬스체크: \`/health\` 엔드포인트" >> $GITHUB_STEP_SUMMARY
        echo "- 로그 위치: \`/var/log/ktb-chat-backend*.log\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### ⚠️ 개발 환경 주의사항" >> $GITHUB_STEP_SUMMARY
        echo "- 기본 환경 변수가 설정되어 있습니다" >> $GITHUB_STEP_SUMMARY
        echo "- 프로덕션 사용 전 보안 설정을 변경하세요" >> $GITHUB_STEP_SUMMARY
        echo "- MongoDB, Redis는 별도로 설치/설정이 필요합니다" >> $GITHUB_STEP_SUMMARY
