name: Deploy Frontend and Backend

on:
  push:
    branches:
      - main
  workflow_dispatch:  # 수동 실행 옵션 추가
    inputs:
      deploy_target:
        description: 'Deploy target'
        required: true
        default: 'both'
        type: choice
        options:
        - both
        - frontend
        - backend

jobs:
  # 변경된 파일 감지
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend-changed: ${{ steps.changes.outputs.frontend }}
      backend-changed: ${{ steps.changes.outputs.backend }}
      manual-frontend: ${{ github.event_name == 'workflow_dispatch' && (inputs.deploy_target == 'frontend' || inputs.deploy_target == 'both') }}
      manual-backend: ${{ github.event_name == 'workflow_dispatch' && (inputs.deploy_target == 'backend' || inputs.deploy_target == 'both') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changes
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend/**'

      - name: Debug outputs
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Deploy target: ${{ inputs.deploy_target }}"
          echo "Manual frontend: ${{ github.event_name == 'workflow_dispatch' && (inputs.deploy_target == 'frontend' || inputs.deploy_target == 'both') }}"
          echo "Manual backend: ${{ github.event_name == 'workflow_dispatch' && (inputs.deploy_target == 'backend' || inputs.deploy_target == 'both') }}"

  # Frontend 빌드 및 S3 배포
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.frontend-changed == 'true' || needs.detect-changes.outputs.manual-frontend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js for Frontend
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Create frontend .env file
        working-directory: frontend
        run: |
          echo "${{ secrets.ENV_FE }}" > .env.production

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build frontend
        working-directory: frontend
        run: |
          npm run build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Upload to S3
        working-directory: frontend
        run: |
          aws s3 sync out/ s3://s3-loadtest-web-bucket/cloudfront --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  # Backend 도커 빌드 및 EC2 배포
  deploy-backend:
    runs-on: ubuntu-latest
    needs: detect-changes
    if: needs.detect-changes.outputs.backend-changed == 'true' || needs.detect-changes.outputs.manual-backend == 'true'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create backend .env file
        working-directory: backend
        run: |
          echo "${{ secrets.ENV_BE }}" > .env

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PAT }}

      - name: Build and push Docker image
        working-directory: backend
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME: ${{ github.repository }}/backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # 이미지 이름을 소문자로 변환 (GHCR 요구사항)
          IMAGE_NAME_LOWER=$(echo "$IMAGE_NAME" | tr '[:upper:]' '[:lower:]')
          echo IMAGE_NAME_LOWER="$IMAGE_NAME_LOWER" >> $GITHUB_ENV

          # Docker 이미지 빌드
          docker build -t $REGISTRY/$IMAGE_NAME_LOWER:$IMAGE_TAG .
          docker build -t $REGISTRY/$IMAGE_NAME_LOWER:latest .
          
          # GitHub Container Registry에 푸시
          docker push $REGISTRY/$IMAGE_NAME_LOWER:$IMAGE_TAG
          docker push $REGISTRY/$IMAGE_NAME_LOWER:latest

      - name: Deploy to EC2 instances
        env:
          REGISTRY: ghcr.io
          IMAGE_NAME_LOWER: ${{ env.IMAGE_NAME_LOWER }}
          IMAGE_TAG: latest
        run: |
          # SSH 키 설정
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

          # EC2 인스턴스에 접속하여 Docker 컨테이너 업데이트
          for HOST in ${{ secrets.EC2_HOSTS }}; do
            ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$HOST "
              sudo docker login ghcr.io -u ${{ secrets.GHCR_USERNAME }} -p ${{ secrets.GHCR_PAT }} && \
              cd /home/ubuntu/loadtest && \
              sudo docker compose pull && \
              sudo docker rm -f backend || true && \
              sudo docker compose up -d && \
              sudo docker image prune -a -f || true
            "
          done
